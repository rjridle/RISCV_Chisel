;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit fpmult : 
  module fpmult : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip b : UInt<32>, m : UInt<32>}
    
    wire exp_a : UInt<8> @[fpmult.scala 14:21]
    wire exp_b : UInt<8> @[fpmult.scala 15:21]
    wire mant_a : UInt<24> @[fpmult.scala 16:22]
    wire mant_b : UInt<24> @[fpmult.scala 17:22]
    wire exponent : UInt<8> @[fpmult.scala 18:24]
    wire fract : UInt<23> @[fpmult.scala 19:21]
    wire result : UInt<48> @[fpmult.scala 20:22]
    wire fpmultMessage : {a : UInt<32>, b : UInt<32>, mant_a : UInt<24>, mant_b : UInt<24>, exp_a : UInt<8>, exp_b : UInt<8>, result : UInt<48>, exponent : UInt<8>, fract : UInt<23>, m : UInt<32>} @[fpmult.scala 24:29]
    node _T_19 = bits(io.a, 30, 23) @[fpmult.scala 26:18]
    exp_a <= _T_19 @[fpmult.scala 26:11]
    node _T_21 = bits(io.a, 22, 0) @[fpmult.scala 27:28]
    node _T_22 = cat(UInt<1>("h01"), _T_21) @[Cat.scala 30:58]
    mant_a <= _T_22 @[fpmult.scala 27:12]
    node _T_23 = bits(io.b, 30, 23) @[fpmult.scala 28:18]
    exp_b <= _T_23 @[fpmult.scala 28:11]
    node _T_25 = bits(io.b, 22, 0) @[fpmult.scala 29:28]
    node _T_26 = cat(UInt<1>("h01"), _T_25) @[Cat.scala 30:58]
    mant_b <= _T_26 @[fpmult.scala 29:12]
    node _T_27 = mul(mant_a, mant_b) @[fpmult.scala 30:22]
    result <= _T_27 @[fpmult.scala 30:12]
    node _T_28 = bits(result, 47, 47) @[fpmult.scala 31:24]
    node _T_29 = not(_T_28) @[fpmult.scala 31:29]
    node _T_31 = eq(_T_29, UInt<1>("h00")) @[fpmult.scala 31:29]
    node _T_32 = bits(result, 46, 24) @[fpmult.scala 31:41]
    node _T_33 = bits(result, 45, 23) @[fpmult.scala 31:56]
    node _T_34 = mux(_T_31, _T_32, _T_33) @[fpmult.scala 31:17]
    fract <= _T_34 @[fpmult.scala 31:11]
    node _T_35 = bits(result, 47, 47) @[fpmult.scala 32:27]
    node _T_36 = not(_T_35) @[fpmult.scala 32:32]
    node _T_38 = eq(_T_36, UInt<1>("h00")) @[fpmult.scala 32:32]
    node _T_39 = add(exp_a, exp_b) @[fpmult.scala 32:46]
    node _T_40 = tail(_T_39, 1) @[fpmult.scala 32:46]
    node _T_42 = sub(_T_40, UInt<7>("h07e")) @[fpmult.scala 32:55]
    node _T_43 = asUInt(_T_42) @[fpmult.scala 32:55]
    node _T_44 = tail(_T_43, 1) @[fpmult.scala 32:55]
    node _T_45 = add(exp_a, exp_b) @[fpmult.scala 32:73]
    node _T_46 = tail(_T_45, 1) @[fpmult.scala 32:73]
    node _T_48 = sub(_T_46, UInt<7>("h07f")) @[fpmult.scala 32:82]
    node _T_49 = asUInt(_T_48) @[fpmult.scala 32:82]
    node _T_50 = tail(_T_49, 1) @[fpmult.scala 32:82]
    node _T_51 = mux(_T_38, _T_44, _T_50) @[fpmult.scala 32:20]
    exponent <= _T_51 @[fpmult.scala 32:14]
    node _T_53 = cat(UInt<1>("h00"), exponent) @[Cat.scala 30:58]
    node _T_54 = cat(_T_53, fract) @[Cat.scala 30:58]
    io.m <= _T_54 @[fpmult.scala 33:10]
    fpmultMessage.a <= io.a @[fpmult.scala 35:21]
    fpmultMessage.b <= io.b @[fpmult.scala 36:21]
    fpmultMessage.mant_a <= mant_a @[fpmult.scala 37:26]
    fpmultMessage.mant_b <= mant_b @[fpmult.scala 38:26]
    fpmultMessage.exp_a <= exp_a @[fpmult.scala 39:25]
    fpmultMessage.exp_b <= exp_b @[fpmult.scala 40:25]
    fpmultMessage.result <= result @[fpmult.scala 41:26]
    fpmultMessage.exponent <= exponent @[fpmult.scala 42:28]
    fpmultMessage.fract <= fract @[fpmult.scala 43:25]
    fpmultMessage.m <= io.m @[fpmult.scala 44:21]
    node _T_55 = bits(reset, 0, 0) @[fpmult.scala 45:11]
    node _T_57 = eq(_T_55, UInt<1>("h00")) @[fpmult.scala 45:11]
    when _T_57 : @[fpmult.scala 45:11]
      printf(clock, UInt<1>(1), "\n\n\n___________________________\n|fpmult Module:\n|  a          : 0x%x\n|  b          : 0x%x\n|  mant_a     : 0x%x\n|  mant_b     : 0x%x\n|  exp_a      : 0x%x\n|  exp_b      : 0x%x\n|  result     : 0x%x\n|  exponent   : 0x%x\n|  fract      : 0x%x\n|  m          : 0x%x\n|___________________________\n", fpmultMessage.a, fpmultMessage.b, fpmultMessage.mant_a, fpmultMessage.mant_b, fpmultMessage.exp_a, fpmultMessage.exp_b, fpmultMessage.result, fpmultMessage.exponent, fpmultMessage.fract, fpmultMessage.m) @[fpmult.scala 45:11]
      skip @[fpmult.scala 45:11]
    
