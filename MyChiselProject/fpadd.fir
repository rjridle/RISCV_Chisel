;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit fpadd : 
  module fpadd : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip b : UInt<32>, mant_a : UInt<24>, mant_b : UInt<24>, exp_a : UInt<8>, exp_b : UInt<8>, exponent : UInt<8>, fract : UInt<23>, s : UInt<32>}
    
    wire shmant : UInt<25> @[fpadd.scala 62:22]
    wire shamt : UInt<8> @[fpadd.scala 63:21]
    wire shiftedval : UInt<25> @[fpadd.scala 64:26]
    wire addval : UInt<25> @[fpadd.scala 65:22]
    wire ovf : UInt<1> @[fpadd.scala 66:19]
    wire exp_pre : UInt<8> @[fpadd.scala 67:23]
    wire addresult : UInt<25> @[fpadd.scala 68:25]
    wire fpaddMessage : {a : UInt<32>, b : UInt<32>, mant_a : UInt<24>, mant_b : UInt<24>, exp_a : UInt<8>, exp_b : UInt<8>, aminusb : UInt<8>, bminusa : UInt<8>, alessb : UInt<1>, shmant : UInt<24>, shamt : UInt<8>, shiftedval : UInt<24>, addval : UInt<24>, ovf : UInt<1>, exp_pre : UInt<8>, exponent : UInt<8>, addresult : UInt<25>, fract : UInt<23>, s : UInt<32>} @[fpadd.scala 69:28]
    node _T_31 = bits(io.a, 30, 23) @[fpadd.scala 72:21]
    io.exp_a <= _T_31 @[fpadd.scala 72:14]
    node _T_33 = bits(io.a, 22, 0) @[fpadd.scala 73:31]
    node _T_34 = cat(UInt<1>("h01"), _T_33) @[Cat.scala 30:58]
    io.mant_a <= _T_34 @[fpadd.scala 73:15]
    node _T_35 = bits(io.b, 30, 23) @[fpadd.scala 74:21]
    io.exp_b <= _T_35 @[fpadd.scala 74:14]
    node _T_37 = bits(io.b, 22, 0) @[fpadd.scala 75:31]
    node _T_38 = cat(UInt<1>("h01"), _T_37) @[Cat.scala 30:58]
    io.mant_b <= _T_38 @[fpadd.scala 75:15]
    node _T_39 = sub(io.exp_a, io.exp_b) @[fpadd.scala 79:28]
    node _T_40 = asUInt(_T_39) @[fpadd.scala 79:28]
    node aminusb = tail(_T_40, 1) @[fpadd.scala 79:28]
    node _T_41 = sub(io.exp_b, io.exp_a) @[fpadd.scala 80:28]
    node _T_42 = asUInt(_T_41) @[fpadd.scala 80:28]
    node bminusa = tail(_T_42, 1) @[fpadd.scala 80:28]
    wire alessb : UInt<1> @[fpadd.scala 81:22]
    node _T_44 = bits(aminusb, 7, 7) @[fpadd.scala 83:17]
    node _T_46 = eq(_T_44, UInt<1>("h01")) @[fpadd.scala 83:21]
    when _T_46 : @[fpadd.scala 83:30]
      alessb <= UInt<1>("h01") @[fpadd.scala 84:16]
      skip @[fpadd.scala 83:30]
    else : @[fpadd.scala 85:17]
      alessb <= UInt<1>("h00") @[fpadd.scala 86:16]
      skip @[fpadd.scala 85:17]
    node _T_49 = not(alessb) @[fpadd.scala 89:27]
    node _T_51 = eq(_T_49, UInt<1>("h00")) @[fpadd.scala 89:27]
    node _T_52 = mux(_T_51, io.exp_b, io.exp_a) @[fpadd.scala 89:19]
    exp_pre <= _T_52 @[fpadd.scala 89:13]
    node _T_53 = not(alessb) @[fpadd.scala 90:25]
    node _T_55 = eq(_T_53, UInt<1>("h00")) @[fpadd.scala 90:25]
    node _T_56 = mux(_T_55, bminusa, aminusb) @[fpadd.scala 90:17]
    shamt <= _T_56 @[fpadd.scala 90:11]
    node _T_57 = not(alessb) @[fpadd.scala 95:30]
    node _T_59 = eq(_T_57, UInt<1>("h00")) @[fpadd.scala 95:30]
    node _T_60 = dshr(io.mant_a, shamt) @[fpadd.scala 95:47]
    node _T_61 = dshr(io.mant_b, shamt) @[fpadd.scala 95:69]
    node _T_62 = mux(_T_59, _T_60, _T_61) @[fpadd.scala 95:22]
    shiftedval <= _T_62 @[fpadd.scala 95:16]
    node _T_63 = bits(shamt, 7, 7) @[fpadd.scala 96:18]
    node _T_64 = bits(shamt, 6, 6) @[fpadd.scala 96:29]
    node _T_65 = or(_T_63, _T_64) @[fpadd.scala 96:22]
    node _T_66 = bits(shamt, 5, 5) @[fpadd.scala 96:40]
    node _T_67 = or(_T_65, _T_66) @[fpadd.scala 96:33]
    node _T_68 = bits(shamt, 4, 4) @[fpadd.scala 96:52]
    node _T_69 = bits(shamt, 3, 3) @[fpadd.scala 96:63]
    node _T_70 = and(_T_68, _T_69) @[fpadd.scala 96:56]
    node _T_71 = or(_T_67, _T_70) @[fpadd.scala 96:44]
    ovf <= _T_71 @[fpadd.scala 96:9]
    node _T_72 = not(ovf) @[fpadd.scala 97:23]
    node _T_74 = eq(_T_72, UInt<1>("h00")) @[fpadd.scala 97:23]
    node _T_76 = mux(_T_74, UInt<1>("h00"), shiftedval) @[fpadd.scala 97:18]
    shmant <= _T_76 @[fpadd.scala 97:12]
    node _T_77 = not(alessb) @[fpadd.scala 101:26]
    node _T_79 = eq(_T_77, UInt<1>("h00")) @[fpadd.scala 101:26]
    node _T_80 = mux(_T_79, io.mant_b, io.mant_a) @[fpadd.scala 101:18]
    addval <= _T_80 @[fpadd.scala 101:12]
    node _T_81 = add(shmant, addval) @[fpadd.scala 102:25]
    node _T_82 = tail(_T_81, 1) @[fpadd.scala 102:25]
    addresult <= _T_82 @[fpadd.scala 102:15]
    node _T_83 = bits(addresult, 24, 24) @[fpadd.scala 103:30]
    node _T_84 = not(_T_83) @[fpadd.scala 103:35]
    node _T_86 = eq(_T_84, UInt<1>("h00")) @[fpadd.scala 103:35]
    node _T_87 = bits(addresult, 23, 1) @[fpadd.scala 103:50]
    node _T_88 = bits(addresult, 22, 0) @[fpadd.scala 103:68]
    node _T_89 = mux(_T_86, _T_87, _T_88) @[fpadd.scala 103:20]
    io.fract <= _T_89 @[fpadd.scala 103:14]
    node _T_90 = bits(addresult, 24, 24) @[fpadd.scala 104:33]
    node _T_91 = not(_T_90) @[fpadd.scala 104:38]
    node _T_93 = eq(_T_91, UInt<1>("h00")) @[fpadd.scala 104:38]
    node _T_95 = add(exp_pre, UInt<1>("h01")) @[fpadd.scala 104:53]
    node _T_96 = tail(_T_95, 1) @[fpadd.scala 104:53]
    node _T_97 = mux(_T_93, _T_96, exp_pre) @[fpadd.scala 104:23]
    io.exponent <= _T_97 @[fpadd.scala 104:17]
    node _T_99 = cat(UInt<1>("h00"), io.exponent) @[Cat.scala 30:58]
    node _T_100 = cat(_T_99, io.fract) @[Cat.scala 30:58]
    io.s <= _T_100 @[fpadd.scala 108:10]
    fpaddMessage.a <= io.a @[fpadd.scala 110:20]
    fpaddMessage.b <= io.b @[fpadd.scala 111:20]
    fpaddMessage.mant_a <= io.mant_a @[fpadd.scala 112:25]
    fpaddMessage.mant_b <= io.mant_b @[fpadd.scala 113:25]
    fpaddMessage.exp_a <= io.exp_a @[fpadd.scala 114:24]
    fpaddMessage.exp_b <= io.exp_b @[fpadd.scala 115:24]
    fpaddMessage.aminusb <= aminusb @[fpadd.scala 116:26]
    fpaddMessage.bminusa <= bminusa @[fpadd.scala 117:26]
    fpaddMessage.alessb <= alessb @[fpadd.scala 118:25]
    fpaddMessage.shmant <= shmant @[fpadd.scala 119:25]
    fpaddMessage.shamt <= shamt @[fpadd.scala 120:24]
    fpaddMessage.shiftedval <= shiftedval @[fpadd.scala 121:29]
    fpaddMessage.addval <= addval @[fpadd.scala 122:25]
    fpaddMessage.ovf <= ovf @[fpadd.scala 123:22]
    fpaddMessage.exp_pre <= exp_pre @[fpadd.scala 124:26]
    fpaddMessage.exponent <= io.exponent @[fpadd.scala 125:27]
    fpaddMessage.addresult <= addresult @[fpadd.scala 126:28]
    fpaddMessage.fract <= io.fract @[fpadd.scala 127:24]
    fpaddMessage.s <= io.s @[fpadd.scala 128:20]
    node _T_101 = bits(reset, 0, 0) @[fpadd.scala 129:11]
    node _T_103 = eq(_T_101, UInt<1>("h00")) @[fpadd.scala 129:11]
    when _T_103 : @[fpadd.scala 129:11]
      printf(clock, UInt<1>(1), "\n\n\n___________________________\n|fpadd Module:\n|  a          : 0x%x\n|  b          : 0x%x\n|  mant_a     : b%b\n|  mant_b     : b%b\n|  exp_a      : b%b\n|  exp_b      : b%b\n|  aminusb    : b%b\n|  bminusa    : b%b\n|  alessb     : b%b\n|  exp_pre    : b%b\n|  shamt      : b%b\n|  shiftedval : b%b\n|  ovf        : b%b\n|  shmant     : 0x%x\n|  addval     : 0x%x\n|  addresult  : 0x%x\n|  exponent   : b%b\n|  fract      : b%b\n|  s          : 0x%x\n|___________________________\n", fpaddMessage.a, fpaddMessage.b, fpaddMessage.mant_a, fpaddMessage.mant_b, fpaddMessage.exp_a, fpaddMessage.exp_b, fpaddMessage.shmant, fpaddMessage.shamt, fpaddMessage.alessb, fpaddMessage.exp_pre, fpaddMessage.shamt, fpaddMessage.shiftedval, fpaddMessage.ovf, fpaddMessage.shmant, fpaddMessage.addval, fpaddMessage.addresult, fpaddMessage.exponent, fpaddMessage.fract, fpaddMessage.s) @[fpadd.scala 129:11]
      skip @[fpadd.scala 129:11]
    
